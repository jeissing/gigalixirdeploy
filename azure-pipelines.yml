# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Testing Elixir : https://spin.atomicobject.com/2018/10/22/elixir-test-multiple-environments/

resources:
 containers:
  # Specify the Docker container hosting the database to be used when running integration tests.
  # See example here: https://github.com/satrapu/aspnet-core-logging/blob/232a3d12fe71f427221f0d2f602d41c4bd93ac2b/Build/azure-pipelines.yml#L108
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/service-containers?view=azure-devops&tabs=yaml#single-job.
  - container: postgres
    # PostgreSQL Docker image (Linux container): https://hub.docker.com/_/postgres.
    image: 'postgres:11.3-alpine'
    ports:
      - 5432:5432/tcp
    env:
       POSTGRES_PASSWORD: postgres
    
      
trigger:
- master
#schedules:
#  - cron: "0 * * * *"   # "10,20,30,40,50 * * * *"
#    displayName: Daily build
#    branches:
#      include:
#      - master

pool:
  vmImage: ubuntu-latest

variables:
  MIX_ENV: 'test' 
stages:
- stage: Commit_stage
  jobs: 
  - job: Build
    services:
      postgres: postgres
    steps:
    - script: |
        # psql --host=postgres --username=postgres --command="SELECT 1;"
        wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && sudo dpkg -i erlang-solutions_2.0_all.deb
        sudo apt-get update
        sudo apt-get install esl-erlang
      displayName: SetupErlang
    - script: |
        sudo apt-get install elixir
        mix local.hex --force
        mix local.rebar --force
      displayName: SetupElixir
    - task: Cache@2
      displayName: deps-cache
      inputs:
        key: '"$(Agent.OS)"| mix | mix.lock '
        path: 'deps'
    - task: Cache@2
      displayName: build-cache 
      #  to do: matrix otp and elixr ? (vgl. githubActions) 
      inputs:
        key: '$(Agent.OS) | build | mix.lock'
        path: '_build'
    - bash: |                        
        mix deps.get
      displayName: Dependencies
    - bash: |
        mix format --check-formatted
      displayName: Format
    - bash: |              
        mix credo --strict
      displayName: Credo
    - bash: |        
        mix test --exclude acceptance        
      displayName: Unittest
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*report_file_test.xml'
    - script: |
        echo deploy to gigalixir
        echo save artifact Quellcode
      displayName: DeployGigalixir

- stage: Acceptance_testing_stage
  dependsOn: Commit_stage
  jobs:
  - job: Acceptance_testing
    steps:
    - script: | 
        echo Create App -Cluster the code!
        echo Execute Acceptante test BDD
        echo generate HAR File for Capacity tests

- stage: Capacity_testing_stage
  displayName: Capacity Testing Stage
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  dependsOn: Acceptance_testing_stage
  jobs:
  - deployment: Capacity_testing
    displayName: Capacity Testing
    environment: CapacityTestEnvironment
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sleep 2m
          - script: |
              echo nightly run on clean cluster optional hotfix 

- stage: Manual_testing_stage
  displayName: Manual Testing Stage
  dependsOn: Capacity_testing_stage
  jobs:
  - deployment: Manual_testing
    displayName: Manual Testing    
    environment: ManualTestEnvironment    
    strategy:
      runOnce:
        deploy:            
          steps:
          - script: |
              echo freigabe on demand optional hotfix
  - job: approvement_job
    dependsOn: Manual_testing
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            josef.eissing@outlook.com
          instructions: 'Please validate the build and resume, if bug reject'
          onTimeout: 'reject'

- stage: Release_freigabe_stage
  dependsOn: Manual_testing_stage
  jobs:
  - job: Release_freigabe
    displayName: Release Freigabe
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: 'josef.eissing@outlook.com'
        instructions: 'Bitte geben Sie das Release frei.'
        onTimeout: 'reject'

- stage: Release_stage
  dependsOn: Release_freigabe_stage
  jobs:
  - deployment: DeployGiga
    displayName: Deploy to produktion
    pool: 
     vmImage: ubuntu-latest
    environment: TestJupp
    strategy:
      runOnce:
        deploy:
          steps:
            - script: |
                echo auf prod deployen
   

    

       
      
