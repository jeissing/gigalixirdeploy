name: TestAndDeploy
on: 
  push:
    branches: [master]
  workflow_dispatch:

jobs: 
  test: 
    runs-on: ubuntu-18.04
    services: 
      db:
        image: postgres:11
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy: 
      matrix:
        otp: [24.0.1]
        elixir: [1.12.0]
    steps:
    - uses: actions/checkout@v2
    - name: Setup elixir
      uses: actions/setup-elixir@v1
      with:
        otp-version: ${{ matrix.otp }}
        elixir-version: ${{ matrix.elixir }}
    - name: Setup Node
      uses: actions/setup-node@v1
      with: 
        node-version: 14.17.0
    - name: Cache Elixir deps
      uses: actions/cache@v1
      id: deps-cache
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
    - name: Cache Elixir _build
      uses: actions/cache@v1
      id: build-cache
      with:
        path: _build
        key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }} 
    - name: Cache Node modules
      uses: actions/cache@v1
      id: node-cache
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('assets/**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install deps
      run: |
        mix deps.get
        npm install --prefix assets
        npm run deploy --prefix assets

    - name: Check formatting
      run: mix format --check-formatted

    - name: Run Credo
      run: mix credo --strict

    - name: Run Unittests 
      run: mix test --exclude acceptance

    - name: Cache PLT 
      uses: actions/cache@v1
      id: plt-cache
      with:
        path: priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
    - name: Create PLT
      run: |
        mkdir -p priv/plts
        mix dialyzer --plt
    #- name: Run Dialyzer
    #  run: mix dialyzer --no-check --halt-exit-status
      
    - uses: nanasess/setup-chromedriver@master
      
    - run: |
        export DISPLAY=:99
        # chromedriver --url-base=/wd/hub &
        chromedriver &
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &  

    - name: Run acceptancetests
      env: 
        MIX_ENV: test
      run: mix test --only acceptance
      
  deploy:
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-18.04
    steps:

    - uses: actions/checkout@v2
      with:
        ref: master
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8.1

    - run: echo APP_ID=$GITHUB_RUN_ID >> $GITHUB_ENV
    - run: echo myapp-${{ env.APP_ID }}

    - run: pip3 install gigalixir
    - run: gigalixir login -e ${{secrets.GIGALIXIR_USERNAME}} -y -p ${{ secrets.GIGALIXIR_PASSWORD }}
    - run: gigalixir create --name myapp-${{ env.APP_ID }} --cloud gcp --region europe-west1
    - run: gigalixir pg:create --app_name myapp-${{ env.APP_ID }} --free -y

    - uses: mhanberg/gigalixir-action@v0.6.1
      with:
        GIGALIXIR_USERNAME: ${{ secrets.GIGALIXIR_USERNAME }}
        GIGALIXIR_PASSWORD: ${{ secrets.GIGALIXIR_PASSWORD }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        GIGALIXIR_APP: myapp-${{ env.APP_ID }}
        MIGRATIONS: false

    - uses: nanasess/setup-chromedriver@master
      with:
        chromedriver-version: '88.0.4324.96'
    - run: |
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &  
   
    - run: gigalixir ps:scale --replicas=0 --app_name myapp-${{ env.APP_ID }}
    - run: echo DATABASE_ID=$(gigalixir pg --app_name myapp-${{ env.APP_ID }} | jq '.[].id') >> $GITHUB_ENV
    - run: gigalixir pg:destroy -y -d ${{ env.DATABASE_ID}}
    - run: gigalixir apps:destroy -y --app_name myapp-${{ env.APP_ID }}
    - run: echo $DATABASE_ID

  build_site:
    name: "Build site with Antora"
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "List folder"
        run: |
          ls -ltr $GITHUB_WORKSPACE
      - name: "Generate site using antora site action"
        uses: kameshsampath/antora-site-action@master
        with:
          antora_playbook: antora-playbook.yml




      

    

    
    
