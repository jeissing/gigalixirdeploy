# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
#schedules:
#  - cron: "0 * * * *"   # "10,20,30,40,50 * * * *"
#    displayName: Daily build
#    branches:
#      include:
#      - master

pool:
  vmImage: ubuntu-latest

stages:
- stage: Commit_stage
  jobs: 
  - job: Build
    steps:
    - script: |
        wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && sudo dpkg -i erlang-solutions_2.0_all.deb
        sudo apt-get update
        sudo apt-get install esl-erlang
    - script: |
        sudo apt-get install elixir
        mix local.hex --force
        mix local.rebar --force
    - script: |
        mix deps.get
    - script: |
        mix format --check-formatted
        mix credo --strict
    - script: |
        mix compile
        echo mix test --exclude acceptance
    - script: |
        echo deploy to gigalixir
        echo save artifact Quellcode

- stage: Acceptance_testing_stage
  dependsOn: Commit_stage
  jobs:
  - job: Acceptance_testing
    steps:
    - script: | 
        echo Create App -Cluster the code!
        echo Execute Acceptante test BDD
        echo generate HAR File for Capacity tests

- stage: Capacity_testing_stage
  displayName: Capacity Testing Stage
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  dependsOn: Acceptance_testing_stage
  jobs:
  - deployment: Capacity_testing
    displayName: Capacity Testing
    environment: TestEnvironment
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo nightly run on clean cluster optional hotfix 

- stage: Manual_testing_stage
  dependsOn: Capacity_testing_stage
  jobs:
  - job: Manual_testing
    displayName: Manual Testing
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        notifyUsers: |
          josef.eissing@outlook.com
        instructions: 'Please validate the build and resume, if bug reject'
        onTimeout: 'resume'
    #- script: |
    #    echo freigabe on demand optional hotfix

- stage: Release_freigabe_stage
  dependsOn: Manual_testing_stage
  jobs:
  - job: Release_freigabe
    displayName: Release Freigabe
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: 'josef.eissing@outlook.com'
        instructions: 'Bitte geben Sie das Release frei.'
        onTimeout: 'reject'

- stage: Release_stage
  dependsOn: Release_freigabe_stage
  jobs:
  - deployment: DeployGiga
    displayName: Deploy to produktion
    pool: 
     vmImage: ubuntu-latest
    environment: TestJupp
    strategy:
      runOnce:
        deploy:
          steps:
            - script: |
                echo auf prod deployen
   

    

       
      
